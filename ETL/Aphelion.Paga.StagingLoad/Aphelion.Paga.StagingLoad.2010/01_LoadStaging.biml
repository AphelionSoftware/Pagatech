<#@ template language="C#" hostspecific="true"#>
<#@ import namespace="System.Data" #>
<#@ import namespace="Varigence.Hadron.CoreLowerer.SchemaManagement" #>

<# var DestConnection = SchemaManager.CreateConnectionNode("SchemaProvider", "Data Source=.\\sql2012;Initial Catalog=Paga_Staging;Provider=SQLNCLI11.1;Integrated Security=SSPI;"); #>
<# var MetaDataConnection = SchemaManager.CreateConnectionNode("SchemaProvider", "Data Source=.\\sql2012;Initial Catalog=Paga_EDW;Provider=SQLNCLI11.1;Integrated Security=SSPI;"); #>

	
<Biml xmlns="http://schemas.varigence.com/biml.xsd">
	<Connections>
	 <Connection Name="Aphelion.DB.LoadQueue" ConnectionString="Data Source=.\sql2012;Initial Catalog=Aphelion.DB.LoadQueue;Provider=SQLNCLI11.1;Integrated Security=SSPI;Auto Translate=False;" CreateInProject="true"/>
	 <Connection Name="Paga_Staging" ConnectionString="Data Source=.\sql2012;Initial Catalog=Paga_Staging;Provider=SQLNCLI11.1;Integrated Security=SSPI;Auto Translate=False;" CreateInProject="true"/>
	 <Connection Name="SourceDB" ConnectionString="Data Source=10.0.20.15;Initial Catalog=paga_bi;Provider=SQLNCLI11.1;Integrated Security=SSPI;Auto Translate=False;" CreateInProject="true"/>
	 <Connection Name="ChangeLog" ConnectionString="Data Source=10.0.20.15;Initial Catalog=paga_change_log;Provider=SQLNCLI11.1;Integrated Security=SSPI;Auto Translate=False;" CreateInProject="true"/>
	</Connections>
	<PackageProjects>
		<PackageProject Name="Aphelion.Paga.StagingLoad.2010">
      
		</PackageProject>
	 </PackageProjects>
	
	<Packages>
		<#
			string PackageListQuery = "SELECT "+
											"PackageName = CONVERT(CHAR(4),(list.LoadGroup + list.rn)) +'_' + StagingTableName, "+
											"list.TABLE_SCHEMA, "+
											"list.TABLE_NAME, "+
											"list.BaseQuery, "+
											"list.KeyColumn, "+
											"list.SourceTable "+
										"FROM "+
										"(  "+
											"SELECT  "+
												"ROW_NUMBER()OVER(PARTITION BY pl.lg ORDER BY TABLE_SCHEMA,TABLE_NAME) AS rn, "+
												"StagingTableName = (TABLE_SCHEMA +'_' +TABLE_NAME), "+
												"pl.TABLE_SCHEMA,  "+
												"pl.TABLE_NAME,  "+
												"BaseQuery = pl.bq,  "+
												"KeyColumn = pl.kc,  "+
												"LoadGroup = pl.lg, "+
												"SourceTable = RTRIM(LTRIM(pl.st))  "+
											"FROM  "+
											"(  "+
												"SELECT  "+
													"package_list.TABLE_SCHEMA,  "+
													"package_list.TABLE_NAME,  "+
													"CONVERT(CHAR(1),MAX(packageType)) AS pt,  "+
													"CONVERT(VARCHAR(MAX),MAX(BaseQuery)) AS bq,  "+
													"CONVERT(VARCHAR(MAX),MAX(KeyColumn)) AS kc,  "+
													"CONVERT(INT ,MAX(LoadGroup)) AS lg,  "+
													"CONVERT(VARCHAR(MAX),MAX(SourceTable)) AS st  "+
												"FROM  "+
												"(  "+
													"SELECT  "+
														"table_list.StagingTableName,  "+
														"table_list.TABLE_SCHEMA,  "+
														"table_list.TABLE_NAME, "+ 
														"CASE  "+
																"WHEN ext_prop.name =  'PackageType'  "+
																"THEN CONVERT(CHAR(1),ext_prop.value)  "+
														"END as PackageType,  "+
														"CASE	 "+
																"WHEN ext_prop.name =  'BaseQuery'  "+
																"THEN CONVERT(VARCHAR(max),ext_prop.value)  "+
														"END as BaseQuery,  "+
														"CASE	 "+
																"WHEN ext_prop.name =  'KeyColumn'  "+
																"THEN CONVERT(VARCHAR(max),ext_prop.value)  "+
														"END as KeyColumn,  "+
														"CASE	 "+
																"WHEN ext_prop.name =  'LoadGroup'  "+
																"THEN CONVERT(INT,ext_prop.value)  "+
														"END as LoadGroup,  "+
														"CASE	 "+
																"WHEN ext_prop.name =  'SourceTable'  "+
																"THEN CONVERT(VARCHAR(max),ext_prop.value)  "+
														"END as SourceTable  "+
													"FROM  "+
													"(  "+
														"SELECT   "+
															"StagingTableName = SCHEMA_NAME(t.schema_id) +'_' + t.name,  "+
															"TABLE_SCHEMA = SCHEMA_NAME(t.schema_id),  "+
															"TABLE_NAME = t.name,  "+
															"t.object_id  "+
														"FROM sys.tables AS t  "+
													") table_list  "+
													"INNER JOIN sys.extended_properties AS ext_prop ON   "+
														"table_list.object_id = ext_prop.major_id  "+
													"WHERE  "+ 
														"ext_prop.name = 'PackageType' OR ext_prop.name = 'BaseQuery' OR ext_prop.name = 'KeyColumn' OR ext_prop.name = 'SourceTable' OR ext_prop.name = 'LoadGroup' "+
												") AS package_list  "+
												"GROUP BY  "+
													"package_list.TABLE_SCHEMA,  "+
													"package_list.TABLE_NAME  "+
												") as pl  "+
											"WHERE   "+
												"pl.bq IS NOT NULL  "+
												"AND LEN(pl.bq) > 0 "+
												"AND pl.bq <> 'PlaceHolder' "+
										") AS list "+
										"INNER JOIN "+
										"("+
											"SELECT "+
												"tsg.TABLE_SCHEMA "+
											"FROM "+
												"( "+
												"SELECT "+
													"ROW_NUMBER()OVER(ORDER BY ts.TABLE_SCHEMA) as seed, "+
													"ts.TABLE_SCHEMA "+
												"FROM "+
												"( "+
													"SELECT DISTINCT  "+
														"t.TABLE_SCHEMA "+
													"FROM INFORMATION_SCHEMA.TABLES AS t "+
													"WHERE "+
														"t.TABLE_TYPE = 'BASE TABLE' "+
												") as ts "+
											") AS tsg "+
										") as prefix ON "+
											"list.TABLE_SCHEMA = prefix.TABLE_SCHEMA ";
					
							
			DataTable tableNamesToImport = ExternalDataAccess.GetDataTable(MetaDataConnection.ConnectionString, PackageListQuery); 
	 	    
			foreach (DataRow row in tableNamesToImport.Rows)
                { 
				string PackageName = row[0].ToString();
				string TableSchema = row[1].ToString();
				string TableName = row[2].ToString();
				string BaseQuery = row[3].ToString();
				string KeyColumn = row[4].ToString();
				string SourceTable = row[5].ToString();
				string CountQuery = "&quot;SELECT CAST(COUNT(*) AS INT) AS _count  FROM (SELECT SourceKey= "+KeyColumn +" FROM " +SourceTable +") AS base_query &quot;";
				string EndOfQuery = "INNER JOIN paga_change_log."+SourceTable +" AS ct ON ct."+KeyColumn +" = base_query.SourceKey WHERE ct.as_of_change_version = 0";
		#>	
				<Package Name="<#=PackageName#>" ConstraintMode="Linear"  ProtectionLevel="EncryptSensitiveWithUserKey"  AutoCreateConfigurationsType="None" DelayValidation="true">
				<Parameters>
					<Parameter Name="EndOfQuery" DataType="String"><#=EndOfQuery#></Parameter>
					<Parameter Name="ChangeOperation" DataType="String"></Parameter>
					<Parameter Name="ChangeVersion" DataType="Decimal">0</Parameter>
				</Parameters>
				
				<Variables>
						<Variable Name="BaseQuery" DataType="String"><#=BaseQuery#></Variable>
						<Variable Name="FullQueryText" DataType="String" EvaluateAsExpression="true">@[User::BaseQuery] +" " +@[$Package::EndOfQuery]</Variable>
						<Variable Name="GetRowCount" DataType="String" EvaluateAsExpression="true"><#=CountQuery#> + @[$Package::EndOfQuery]</Variable>
						<Variable Name="RowCount" DataType="Int32">0</Variable>
					</Variables>
				
				<Tasks>
					<ExecuteSQL Name="EST_CheckForRows" ConnectionName="ChangeLog" ResultSet="SingleRow">
						<VariableInput VariableName="User.GetRowCount" />
						<Results>
							<Result Name="_count" VariableName="User.RowCount" />
						</Results>
								
					</ExecuteSQL>
					<Dataflow Name="DFT_Load <#=String.Format("{0}_{1}",TableSchema, TableName)#>"  DelayValidation="true">
						<Transformations>
						<OleDbSource Name="OLEDB_GetData_<#=String.Format("{0}_{1}",TableSchema, TableName)#>" ConnectionName="SourceDB">
							<VariableInput VariableName="User.FullQueryText"></VariableInput>
						</OleDbSource>
						<OleDbDestination Name="OLEDB_InsertIntoStaging_<#=String.Format("{0}_{1}",TableSchema, TableName)#>" ConnectionName="Paga_Staging" KeepIdentity="false" BatchSize = "100000" >
							<ExternalTableOutput Table="<#=String.Format("{0}.{1}_{2}","Staging",TableSchema, TableName)#>"/>
						</OleDbDestination>
						</Transformations>
						<PrecedenceConstraints>
									<Inputs>
										<Input OutputPathName="EST_CheckForRows.Output" EvaluationOperation="ExpressionAndConstraint" EvaluationValue="Success" Expression="@[User::RowCount] > 0"/>
									</Inputs>
								</PrecedenceConstraints>
					</Dataflow>
					
				</Tasks>
				
		
				</Package>
				
		
		<# } #>
	</Packages>
		
</Biml>