<# var SourceConnection = SchemaManager.CreateConnectionNode("SchemaProvider", "Data Source=.\\sql2012;Initial Catalog=Paga_Staging;Provider=SQLNCLI11.1;Integrated Security=SSPI;"); #>
<# var DestConnection = SchemaManager.CreateConnectionNode("SchemaProvider", "Data Source=.\\sql2012;Initial Catalog=Paga_EDW;Provider=SQLNCLI11.1;Integrated Security=SSPI;"); #>
<# var ErrorConnection = SchemaManager.CreateConnectionNode("SchemaProvider", "Data Source=.\\sql2012;Initial Catalog=Paga_Errors;Provider=SQLNCLI11.1;Integrated Security=SSPI;"); #>
	
<# var DestSchema = DestConnection.ImportDB("", "", ImportOptions.ExcludeViews); #>
<# var DestTables = DestConnection.GenerateTableNodes(); #>
	
<# var ErrorSchema = ErrorConnection.ImportDB("", "", ImportOptions.ExcludeViews); #>
<# var ErrorTables = ErrorConnection.GenerateTableNodes(); #>
	
<# var strLookup = ""; #>

<Biml xmlns="http://schemas.varigence.com/biml.xsd">
  <Connections>
    <Connection Name="Paga_Staging" ConnectionString="Data Source=.\sql2012;Initial Catalog=Paga_Staging;Provider=SQLNCLI11.1;Integrated Security=SSPI;" CreateInProject="true"/>
    <Connection Name="Paga_EDW" ConnectionString="Data Source=.\sql2012;Initial Catalog=Paga_EDW;Provider=SQLNCLI11.1;Integrated Security=SSPI;" CreateInProject="true"/>
    <Connection Name="Paga_Errors" ConnectionString="Data Source=.\sql2012;Initial Catalog=Paga_Errors;Provider=SQLNCLI11.1;Integrated Security=SSPI;" CreateInProject="true"/>
  </Connections>
	<PackageProjects>
    <PackageProject Name="Aphelion.Paga.StagingLoad.2010">
	 
    </PackageProject>
  </PackageProjects>

  <Packages>

	<# string PackageListQuery ="SELECT "+ 
									"PackageName = CONVERT(CHAR(4),(list.load_group + list.rn)) +'_EDW_Load_' + list.TABLE_SCHEMA +'_' + list.TABLE_NAME, "+ 
									"list.TABLE_SCHEMA, "+
									"list.TABLE_NAME, "+
									"ErrorTable = TABLE_SCHEMA + '_' + TABLE_NAME "+
								"FROM "+
								"(  "+
									"SELECT  "+
										"ROW_NUMBER()OVER(PARTITION BY pl.load_group ORDER BY TABLE_SCHEMA, TABLE_NAME) AS rn, "+
										"StagingTableName = (TABLE_SCHEMA +'_' +TABLE_NAME), "+
										"pl.TABLE_SCHEMA, "+  
										"pl.TABLE_NAME, "+ 
										"pl.load_group "+ 
									"FROM "+ 
									"( "+ 
										"SELECT  "+
											"package_list.TABLE_SCHEMA,  "+
											"package_list.TABLE_NAME, "+ 
											"CONVERT(VARCHAR(MAX),MAX(LoadGroup)) AS load_group "+ 
										"FROM "+ 
										"(  "+
											"SELECT "+  
												"table_list.StagingTableName, "+ 
												"table_list.TABLE_SCHEMA, "+ 
												"table_list.TABLE_NAME, "+ 
												"CASE "+	 
													"WHEN ext_prop.name =  'LoadGroup'  "+
													"THEN CONVERT(VARCHAR(max),ext_prop.value)  "+
												"END as LoadGroup  "+
											"FROM  "+
											"(  "+
												"SELECT  "+ 
													"StagingTableName = SCHEMA_NAME(t.schema_id) +'_' + t.name,  "+
													"TABLE_SCHEMA = SCHEMA_NAME(t.schema_id), "+ 
													"TABLE_NAME = t.name,  "+
													"t.object_id  "+
												"FROM sys.tables AS t "+ 
											") table_list  "+
											"INNER JOIN sys.extended_properties AS ext_prop ON   "+
												"table_list.object_id = ext_prop.major_id  "+
											"WHERE   "+
												"ext_prop.name = 'LoadGroup' "+
										") AS package_list  "+
										"GROUP BY  "+
											"package_list.TABLE_SCHEMA,  "+
											"package_list.TABLE_NAME  "+
										") as pl  "+
									"WHERE   "+
										"LEN(pl.load_group) > 0 "+
								") AS list"; 
	  
			DataTable tableNamesToImport = ExternalDataAccess.GetDataTable(DestConnection.ConnectionString, PackageListQuery); 
			foreach (DataRow row in tableNamesToImport.Rows)
                { 
				string PackageName = row[0].ToString();
				string TableSchema = row[1].ToString();
				string TableName = row[2].ToString();
				string errTable = row[3].ToString();
#>	
	<Package Name="<#=PackageName#>" ConstraintMode="Parallel" ProtectionLevel="DontSaveSensitive"  MaxErrorCount="2000"  DelayValidation="true">
	
	<Variables>
		<Variable Name="intQueueID" DataType="Int32" >0</Variable>
		<Variable Name="intErrorCount" DataType="Int32" >0</Variable>
		<Variable Name="strPackageName" DataType="String"><#=PackageName#></Variable>
 	</Variables>
   <Tasks>
		<!-- This needs to go -->
		<ExecuteSQL Name="SQL_Truncate_Error_<#=errTable#>" ConnectionName="Paga_Errors">
          <DirectInput>TRUNCATE TABLE [Errors].[<#=errTable#>]
		  </DirectInput>
        </ExecuteSQL>
		<Dataflow Name="DFT_Load_<#=TableSchema#>_<#=TableName#>"  MaxErrorCount="2000">
			<PrecedenceConstraints>
			<Inputs>
				<Input OutputPathName="SQL_Truncate_Error_<#=errTable#>.Output"> </Input>
			</Inputs>
			</PrecedenceConstraints>
			<Transformations>
				<OleDbSource Name="OLE_SRC_Staging_<#=TableSchema#>_<#=TableName#>" ConnectionName="Paga_Staging">
				  <DirectInput>
					SELECT *
					FROM [Staging].[<#=TableSchema#>_<#=TableName#>]
				  </DirectInput>
				</OleDbSource>
				<# 
					strLookup ="OLE_SRC_Staging_" + TableSchema +"_" + TableName + ".Output";
					string FKColumnQuery = "SELECT DISTINCT "+
												"C.name AS ForeignKeyColumn, "+
												"'[' + FS.name + '].[' + FT.name + ']' AS ForeignTable, "+
												"FC.name AS ForeignTableColumn, "+
												"LEFT(C.Name, len(C.name)-2) + 'SourceKey' AS SourceLookupColumn, "+
												"CAST(C.is_nullable AS VARCHAR) AS IsNullable "+
											"FROM sys.foreign_key_columns AS FK "+
											"INNER JOIN sys.tables AS T ON "+
												"FK.parent_object_id = T.object_id "+
											"INNER JOIN sys.columns AS C ON "+
												"FK.parent_object_id = C.object_id "+
												"AND FK.parent_column_id = C.column_id "+
											"INNER JOIN sys.tables AS FT ON "+
												"FK.referenced_object_id = FT.object_id "+
											"INNER JOIN sys.columns AS FC ON "+
												"FK.referenced_object_id = FC.object_id "+
												"AND FK.referenced_column_id = FC.column_id "+
											"INNER JOIN sys.schemas AS FS ON "+
												"FT.schema_id = FS.schema_id "+
											"WHERE "+
												"C.name != ('Active') "+
												"AND FT.Name NOT IN ('DimDate', 'DimTime') "+
												"AND T.name = '"+ TableName + "'";
					DataTable FKColumns = ExternalDataAccess.GetDataTable(DestConnection.ConnectionString, FKColumnQuery);
					string IsNullable ="" ;

					foreach (DataRow FKColumn in FKColumns.Rows) { 
						IsNullable = "" + FKColumn["IsNullable"];
						if(IsNullable=="1") { #>
						<Lookup Name="LKP_<#=FKColumn["ForeignKeyColumn"]#>" OleDbConnectionName="Paga_EDW" NoMatchBehavior="IgnoreFailure">
						<InputPath OutputPathName="<#=strLookup#>" />
						  <DirectInput>SELECT SourceKey, <#=FKColumn["ForeignTableColumn"]#> FROM <#=FKColumn["ForeignTable"]#></DirectInput>
						  <Inputs>
							<Column SourceColumn="<#=FKColumn["SourceLookupColumn"]#>" TargetColumn="SourceKey" />
						  </Inputs>
						  <Outputs>
							<Column SourceColumn="<#=FKColumn["ForeignTableColumn"]#>" TargetColumn="<#=FKColumn["ForeignKeyColumn"]#>" />
						  </Outputs>
						</Lookup>
					<#	} else
						 { #>
							<Lookup Name="LKP_<#=FKColumn["ForeignKeyColumn"]#>" OleDbConnectionName="Paga_EDW" NoMatchBehavior="RedirectRowsToErrorOutput">
							<InputPath OutputPathName="<#=strLookup#>" />
							  <DirectInput>SELECT SourceKey, <#=FKColumn["ForeignTableColumn"]#> FROM <#=FKColumn["ForeignTable"]#></DirectInput>
							  <Inputs>
								<Column SourceColumn="<#=FKColumn["SourceLookupColumn"]#>" TargetColumn="SourceKey" />
							  </Inputs>
							  <Outputs>
								<Column SourceColumn="<#=FKColumn["ForeignTableColumn"]#>" TargetColumn="<#=FKColumn["ForeignKeyColumn"]#>" />
							  </Outputs>
							</Lookup>
						 <DerivedColumns Name="DC_AddErrorDetails_<#=FKColumn["ForeignKeyColumn"]#>">
							<InputPath OutputPathName="LKP_<#=FKColumn["ForeignKeyColumn"]#>.Error" />
              				<Columns>
								<Column Name="PackageName" DataType="AnsiString" Length="255" >(DT_STR, 255, 1252)@[System::PackageName]</Column>
								<Column Name="QueueID" DataType="Int32" >@[User::intQueueID]</Column>
								<Column Name="ErrorType" DataType="AnsiString" Length="255" >(DT_STR, 255, 1252)("Failed Lookup <#=FKColumn["ForeignKeyColumn"]#>")</Column>
								<Column Name="SSISErrorCode" DataType="Int32" >ErrorCode</Column>
								<Column Name="SSISErrorColumn" DataType="Int32" >ErrorColumn</Column>
							</Columns>
						</DerivedColumns>
						<RowCount Name="RC_CountErrors_<#=FKColumn["ForeignKeyColumn"]#>" VariableName="User.intErrorCount">
							 <InputPath OutputPathName="DC_AddErrorDetails_<#=FKColumn["ForeignKeyColumn"]#>.Output" />
						</RowCount>
						<OleDbDestination Name="OLE_DST_Error_<#=TableSchema#>_<#=TableName#>_<#=FKColumn["ForeignKeyColumn"]#>" ConnectionName="Paga_Errors" MaximumInsertCommitSize="200"  TableLock="false">
							  <InputPath OutputPathName="RC_CountErrors_<#=FKColumn["ForeignKeyColumn"]#>.Output" />
							<ExternalTableOutput Table="[Errors].[<#=errTable#>]" />
						</OleDbDestination>
						<# } 					 
							strLookup = "LKP_" + FKColumn["ForeignKeyColumn"] + ".Match";
						#>
							<!-- end lookup for each-->
				<# } 
					
					string Schema_Table = TableSchema +"_" +TableName;
					string SchemaQualifiedName = TableSchema +"." +TableName;
				#> 
				
				<OleDbDestination Name="OLE_DST_<#=Schema_Table#>" ConnectionName="Paga_EDW">
					<InputPath OutputPathName="<#=strLookup#>" />
					<ExternalTableOutput Table="<#=SchemaQualifiedName#>" />
					<ErrorHandling ErrorRowDisposition="RedirectRow" TruncationRowDisposition="RedirectRow" />
				</OleDbDestination>

		
				<OleDbDestination Name="OLE_DST_Singleton_<#=Schema_Table#>" ConnectionName="Paga_EDW" MaximumInsertCommitSize="1">
				  <InputPath OutputPathName="OLE_DST_<#=Schema_Table#>.Error" />
				  <ExternalTableOutput Table="<#=SchemaQualifiedName#>" />
				  <ErrorHandling ErrorRowDisposition="RedirectRow" TruncationRowDisposition="RedirectRow" />
				</OleDbDestination>

				<DerivedColumns Name="DC_AddErrorDetails">
				  <InputPath OutputPathName="OLE_DST_Singleton_<#=Schema_Table#>.Error" />
				  <Columns>
					<Column Name="PackageName" DataType="AnsiString" Length="255" >(DT_STR, 255, 1252)@[System::PackageName]</Column>
					<Column Name="QueueID" DataType="Int32" >@[User::intQueueID]</Column>
					<Column Name="ErrorType" DataType="AnsiString" Length="255" >(DT_STR, 255, 1252)("Insert")</Column>
					<Column Name="SSISErrorCode" DataType="Int32" >OLE_DST_Singleton_<#=Schema_Table#>.ErrorCode</Column>
					<Column Name="SSISErrorColumn" DataType="Int32" >OLE_DST_Singleton_<#=Schema_Table#>.ErrorColumn</Column>
				  </Columns>
				</DerivedColumns>
				<RowCount Name="RC_CountErrors" VariableName="User.intErrorCount">
				  <InputPath OutputPathName="DC_AddErrorDetails.Output" />
				</RowCount>

				<OleDbDestination Name="OLE_DST_Error_<#=Schema_Table#>" ConnectionName="Paga_Errors" MaximumInsertCommitSize="200" TableLock="false">
					  <InputPath OutputPathName="RC_CountErrors.Output" />
					  <ExternalTableOutput Table="[Errors].[<#=Schema_Table#>]" />
				</OleDbDestination>
				</Transformations>
			</Dataflow>
		 </Tasks>
	</Package>	
<#  } #>
</Packages>
	
</Biml>
<#@ import namespace="System.Data" #>
<#@ import namespace="Varigence.Hadron.CoreLowerer.SchemaManagement" #>
