<#@ template language="C#" hostspecific="true"#>
<#@ import namespace="System.Data" #>
<#@ import namespace="Varigence.Hadron.CoreLowerer.SchemaManagement" #>

<# var DestConnection = SchemaManager.CreateConnectionNode("SchemaProvider", "Data Source=10.0.20.15;Initial Catalog=paga_change_log;Provider=SQLNCLI11.1;Integrated Security=SSPI;"); #>


	
<Biml xmlns="http://schemas.varigence.com/biml.xsd">
	<Connections>
	 <Connection Name="Aphelion.DB.LoadQueue" ConnectionString="Data Source=.\sql2012;Initial Catalog=Aphelion.DB.LoadQueue;Provider=SQLNCLI11.1;Integrated Security=SSPI;Auto Translate=False;" CreateInProject="true"/>
	 <Connection Name="PrimaryDB" ConnectionString="Data Source=pagahalistener,1433;Initial Catalog=paga;Provider=SQLNCLI11.1;Integrated Security=SSPI;Auto Translate=False;" CreateInProject="true"/>
	 <Connection Name="ChangeLogDB" ConnectionString="Data Source=10.0.20.15;Initial Catalog=paga_change_log;Provider=SQLNCLI11.1;Integrated Security=SSPI;Auto Translate=False;" CreateInProject="true"/>
	</Connections>
	<PackageProjects>
		<PackageProject Name="Aphelion.Paga.ChangeLoad">
      
		</PackageProject>
	 </PackageProjects>
	
	<Packages>
		<#
			string PackageListQuery = "SELECT "+
			"PackageName = CONVERT(CHAR(4),(prefix.package_grp + list.rn)) +'_' + StagingTableName, "+
			"list.TABLE_SCHEMA, "+
			"list.TABLE_NAME, "+
			"list.prod_table_name, "+
			"list.BaseQuery "+
			
			"FROM "+
			"(  "+
			"SELECT  "+
			"ROW_NUMBER()OVER(PARTITION BY TABLE_SCHEMA ORDER BY TABLE_NAME) AS rn, "+
			"StagingTableName = (TABLE_SCHEMA +'_' +TABLE_NAME), "+
			"pl.TABLE_SCHEMA,  "+
			"pl.TABLE_NAME,  "+
			"pl.prod_table_name,  "+
			"BaseQuery = pl.bq  "+
		
			"FROM  "+
			"(  "+
			"SELECT  "+
			"package_list.TABLE_SCHEMA,  "+
			"package_list.TABLE_NAME,  "+
			"package_list.prod_table_name, "+
			"CONVERT(CHAR(1),MAX(packageType)) AS pt,  "+
			"CONVERT(VARCHAR(MAX),MAX(BaseQuery)) AS bq  "+
			
			"FROM  "+
			"(  "+
			"SELECT  "+
			"table_list.StagingTableName,  "+
			"table_list.TABLE_SCHEMA,  "+
			"table_list.TABLE_NAME, "+
			"table_list.prod_table_name, "+
			"CASE  "+
			"WHEN ext_prop.name =  'PackageType'  "+
			"THEN CONVERT(CHAR(1),ext_prop.value)  "+
			"END as PackageType,  "+
			"CASE	 "+
			"WHEN ext_prop.name =  'BaseQuery'  "+
			"THEN CONVERT(VARCHAR(max),ext_prop.value)  "+
			"END as BaseQuery  "+
			
			"FROM  "+
			"(  "+
			"SELECT   "+
			"StagingTableName = SCHEMA_NAME(t.schema_id) +'_' + t.name,  "+
			"TABLE_SCHEMA = SCHEMA_NAME(t.schema_id),  "+
			"TABLE_NAME = t.name,  "+
			"t.object_id,  "+
			"CASE "+
				"WHEN t.name = 'RoleLookup' THEN 'Role'  "+ 
				"WHEN t.name = 'Users' THEN 'User'  "+
				"ELSE t.name  "+ 
			"END AS prod_table_name  "+
			"FROM sys.tables AS t  "+
			") table_list  "+
			"INNER JOIN sys.extended_properties AS ext_prop ON   "+
			"table_list.object_id = ext_prop.major_id  "+
			"WHERE  "+
			"ext_prop.name = 'PackageType' OR ext_prop.name LIKE 'BaseQuery'  "+
			") AS package_list  "+
			"GROUP BY  "+
			"package_list.TABLE_SCHEMA,  "+
			"package_list.TABLE_NAME,  "+
			"package_list.prod_table_name "+
			") as pl  "+
			"WHERE   "+
			"pl.bq IS NOT NULL  "+
			"AND LEN(pl.bq) > 0 "+
			") AS list "+
			"INNER JOIN "+
			"("+
			"SELECT "+
			"(tsg.seed *100) + 2000 AS package_grp, "+
			"tsg.TABLE_SCHEMA "+
			"FROM "+
			"( "+
			"SELECT "+
			"ROW_NUMBER()OVER(ORDER BY ts.TABLE_SCHEMA) as seed, "+
			"ts.TABLE_SCHEMA "+
			"FROM "+
			"( "+
			"SELECT DISTINCT  "+
			"t.TABLE_SCHEMA "+
			"FROM INFORMATION_SCHEMA.TABLES AS t "+
			"WHERE "+
			"t.TABLE_TYPE = 'BASE TABLE' "+
			") as ts "+
			") AS tsg "+
			") as prefix ON "+
			"list.TABLE_SCHEMA = prefix.TABLE_SCHEMA ";


			DataTable tableNamesToImport = ExternalDataAccess.GetDataTable(DestConnection.ConnectionString, PackageListQuery);

			foreach (DataRow row in tableNamesToImport.Rows)
			{
				string PackageName = row[0].ToString();
				string TableSchema = row[1].ToString();
				string TableName = row[2].ToString();
				string ProdTableName = row[3].ToString();
				string BaseQuery = row[4].ToString() +" ";
				string CountQuery = "&quot;SELECT COUNT(*) AS _count FROM CHANGETABLE(CHANGES [dbo].[" +ProdTableName +"] &quot;";
				
			#>
			<Package Name="<#=PackageName#>" ConstraintMode="Parallel"  ProtectionLevel="DontSaveSensitive"  AutoCreateConfigurationsType="None" DelayValidation = "true">
           
					<Parameters>
						<Parameter Name="CurrentVersion" DataType="String">6</Parameter>
						<Parameter Name="LastSyncVersion" DataType="String">0</Parameter>
						
					</Parameters>
					
					<Variables>
						<Variable Name="BaseQuery" DataType="String"><#=BaseQuery#></Variable>
						<Variable Name="VersionFilter" DataType="String" EvaluateAsExpression="true">", " +@[$Package::LastSyncVersion] +") AS change_log WHERE SYS_CHANGE_VERSION &lt;= " + @[$Package::CurrentVersion]</Variable>
						<Variable Name="GetRowCount" DataType="String" EvaluateAsExpression="true"><#=CountQuery#> + @[User::VersionFilter]</Variable>
						<Variable Name="RowCount" DataType="Object"></Variable>
						<Variable Name="GetChangedRows" DataType="String" EvaluateAsExpression="true">@[User::BaseQuery]+ @[User::VersionFilter]</Variable>
						
					</Variables>
				
				 <Tasks>

							<ExecuteSQL Name="EST_CheckForRows" ConnectionName="PrimaryDB" ResultSet="SingleRow">
								<VariableInput VariableName="User.GetRowCount" />
								<Results>
									<Result Name="_count" VariableName="User.RowCount" />
								</Results>
								
							</ExecuteSQL>
							<Dataflow Name="DFT_Load <#=String.Format("{0}_{1}",TableSchema, TableName)#> " DelayValidation = "true">
							  <Transformations>
								<OleDbSource Name="OLEDB_GetData" ConnectionName="PrimaryDB">
								  <VariableInput VariableName="User.GetChangedRows"></VariableInput>
								  
								</OleDbSource>
									 <DerivedColumns Name="dc_as_of_change_version">
									<Columns>
										<Column Name="as_of_change_version" DataType="Int32" >@[$Package::CurrentVersion]</Column>
									</Columns>
								</DerivedColumns>
								  <OleDbDestination Name="OLEDB_InsertIntoChangeLog" ConnectionName="ChangeLogDB" KeepIdentity="false" UseFastLoadIfAvailable="true" BatchSize = "100000" >
								  <ExternalTableOutput Table="<#=String.Format("{0}.{1}",TableSchema, TableName)#>"/>
								</OleDbDestination>
							  </Transformations>
							  	<PrecedenceConstraints>
									<Inputs>
										<Input OutputPathName="EST_CheckForRows.Output" EvaluationOperation="Expression" Expression="@RowCount>0"/>
									</Inputs>
								</PrecedenceConstraints>
							</Dataflow>

						</Tasks>
				
		
				</Package>
		
		<# } #>
	</Packages>
		
</Biml>