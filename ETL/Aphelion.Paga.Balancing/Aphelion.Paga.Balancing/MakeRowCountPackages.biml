<#@ template language="C#" hostspecific="true"#>
<#@ import namespace="System.Data" #>
<#@ import namespace="Varigence.Hadron.CoreLowerer.SchemaManagement" #>

<# var DestConnection = SchemaManager.CreateConnectionNode("SchemaProvider", "Data Source=.\\sql2012;Initial Catalog=Aphelion.DB.Balancing;Provider=SQLNCLI11.1;Integrated Security=SSPI;"); #>


	
<Biml xmlns="http://schemas.varigence.com/biml.xsd">
	<Connections>
	 <Connection Name="Aphelion.DB.Balancing" ConnectionString="Data Source=.\sql2012;Initial Catalog=Aphelion.DB.Balancing;Provider=SQLNCLI11.1;Integrated Security=SSPI;Auto Translate=False;" CreateInProject="true"/>
	 <Connection Name="PrimaryDB" ConnectionString="Data Source=pagahalistener,1433;Initial Catalog=paga;Provider=SQLNCLI11.1;Integrated Security=SSPI;Auto Translate=False;" CreateInProject="true"/>
	</Connections>
	<PackageProjects>
		<PackageProject Name="Aphelion.Paga.ChangeLoad">
      
		</PackageProject>
	 </PackageProjects>
	
	<Packages>
		<#
			string PackageListQuery = " SELECT "+
										"	PackageName = CONVERT(CHAR(4),(prefix.package_grp + list.rn)) +'_' + StagingTableName, "+
										"	list.TABLE_SCHEMA, "+
										"	list.TABLE_NAME, "+
										"	list.BaseQuery "+
										"FROM "+
										"( "+
										"	SELECT "+
										"		ROW_NUMBER()OVER(PARTITION BY TABLE_SCHEMA ORDER BY TABLE_NAME) AS rn, "+
										"		StagingTableName = (TABLE_SCHEMA +'_' +TABLE_NAME), "+
										"		pl.TABLE_SCHEMA, "+
										"		pl.TABLE_NAME, "+
										"		BaseQuery = pl.bq "+
										"	FROM "+
										"	( "+
										"		SELECT "+
										"			package_list.TABLE_SCHEMA, "+
										"			package_list.TABLE_NAME, "+
										"			CONVERT(VARCHAR(MAX),MAX(BaseQuery)) AS bq "+
										"		FROM "+
										"		( "+
										"			SELECT "+
										"				table_list.StagingTableName, "+
										"				table_list.TABLE_SCHEMA, "+
										"				table_list.TABLE_NAME, "+
										"				CASE	"+
										"						WHEN ext_prop.name =  'BaseQuery' "+
										"						THEN CONVERT(VARCHAR(max),ext_prop.value) "+
										"				END as BaseQuery "+
										"			FROM "+
										"			( "+
										"				SELECT  "+
										"					StagingTableName = SCHEMA_NAME(t.schema_id) +'_' + t.name, "+
										"					TABLE_SCHEMA = SCHEMA_NAME(t.schema_id), "+
										"					TABLE_NAME = t.name, "+
										"					t.object_id "+
										"				FROM sys.tables AS t "+
										"			) table_list "+
										"			INNER JOIN sys.extended_properties AS ext_prop ON  "+
										"				table_list.object_id = ext_prop.major_id "+
										"			WHERE  "+
										"				ext_prop.name = 'BaseQuery' "+
										"		) AS package_list "+
										"		GROUP BY "+
										"			package_list.TABLE_SCHEMA, "+
										"			package_list.TABLE_NAME "+
										"		) as pl "+
										"	WHERE "+ 
										"		pl.bq IS NOT NULL "+
										"		AND LEN(pl.bq) > 0  "+
										") AS list "+
										"INNER JOIN "+
										"( "+
										"	SELECT "+
										"		(tsg.seed *100) + 1000 AS package_grp, "+
										"		tsg.TABLE_SCHEMA "+
										"	FROM "+
										"		( "+
										"		SELECT "+
										"			ROW_NUMBER()OVER(ORDER BY ts.TABLE_SCHEMA) as seed, "+
										"			ts.TABLE_SCHEMA "+
										"		FROM "+
										"		( "+
										"			SELECT DISTINCT "+
										"				t.TABLE_SCHEMA "+
										"			FROM INFORMATION_SCHEMA.TABLES AS t "+
										"			WHERE "+
										"				t.TABLE_TYPE = 'BASE TABLE' "+
										"		) as ts "+
										"	) AS tsg "+
										") as prefix ON "+
											"list.TABLE_SCHEMA = prefix.TABLE_SCHEMA";


			DataTable tableNamesToImport = ExternalDataAccess.GetDataTable(DestConnection.ConnectionString, PackageListQuery);

			foreach (DataRow row in tableNamesToImport.Rows)
			{
				string PackageName = row[0].ToString();
				string TableSchema = row[1].ToString();
				string TableName = row[2].ToString();
				string Stream0 = row[3].ToString();
		
			#>
			<Package Name="<#=PackageName#>" ConstraintMode="Linear"  ProtectionLevel="DontSaveSensitive"  AutoCreateConfigurationsType="None" DelayValidation = "true">
           <Variables>
				<Variable Name="Stream0" DataType="String"><#=Stream0#></Variable>
			</Variables>
				
			<Tasks>
			<Dataflow Name="DFT_Load <#=String.Format("{0}_{1}",TableSchema, TableName)#> " DelayValidation = "true">
				<Transformations>
					<OleDbSource Name="OLEDB_GetRowCount" ConnectionName="PrimaryDB">
						<VariableInput VariableName="User.Stream0"></VariableInput>
					</OleDbSource>
				
					<OleDbDestination Name="OLEDB_InsertIntoBalancing" ConnectionName="Aphelion.DB.Balancing" KeepIdentity="false" UseFastLoadIfAvailable="true" BatchSize = "0" >
						<ExternalTableOutput Table="<#=String.Format("{0}.{1}",TableSchema, TableName)#>"/>
					</OleDbDestination>
				</Transformations>
			</Dataflow>
		</Tasks>			
				
		</Package>
		<# } #>
	</Packages>
		
</Biml>